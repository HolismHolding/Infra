#!/bin/bash

. /HolismHolding/Infra/Scripts/Message.sh

function EnsureDependenciesExist()
{
    if [ ! -f "$PWD/Dependencies" ]; then
        Error "Can't find the file Dependencies";
        exit;
    fi
}

function EnsureTargetServerIsProvided()
{
    export TargetServer=$1

    if [ ${TargetServer:-NotSet} == "NotSet" ]; then 
        Error "TargetServer is not provided";
        exit;
    fi
}

function LoadPassword()
{
    if [ ! -f /LocalSecrets/$TargetServer ]; then
        Error "TargetPassword does not exist in local secrets";
        exit;
    fi
    export TargetPassword=$(cat /LocalSecrets/$TargetServer)
}

sudo rm -rf /Temp/SchemaCompare

function Compare()
{
    Org=$(echo $1 | cut -d'/' -f1)
    Repo=$(echo $1 | cut -d'/' -f2)

    Info "Comparing $Repo ...";

    sudo mkdir -p /Temp/SchemaCompare/$Repo
    sudo chmod -R 777 /Temp/SchemaCompare/$Repo

    if [ ! -f "/$Org/$Repo/Database.json" ]; then
        Warning "/$Org/$Repo/Database.json does not exist"
        return;
    fi

    export OpenedVsCode=0

    if [[ $OpenedVsCode == 0 ]]; then
        OpenedVsCode=1
        #code /Temp/SchemaCompare
    fi

    sqlpackage /a:extract /of:true /scs:"data source=localhost,1433; initial catalog=$Repo; user id=SA; password=lksU2o412f7tBj58t07B;" /tf:"/Temp/SchemaCompare/$Repo/Source.dacpac";

    sqlpackage /a:deployreport /op:"/Temp/SchemaCompare/$Repo/Report.xml" /of:True /sf:"/Temp/SchemaCompare/$Repo/Source.dacpac" /tcs:"data source=$TargetServer; initial catalog=$Repo; user id=SA; password=$TargetPassword;" /P:DropObjectsNotInSource=True /P:DropPermissionsNotInSource=False /P:IgnorePermissions=True /mp:10

    sqlpackage /a:script /op:"/Temp/SchemaCompare/$Repo/Migration.sql" /of:True /sf:"/Temp/SchemaCompare/$Repo/Source.dacpac" /tcs:"data source=$TargetServer; initial catalog=$Repo; user id=SA; password=$TargetPassword;" /P:DropObjectsNotInSource=True /P:DropPermissionsNotInSource=False /P:IgnorePermissions=True /mp:10

    sudo chmod -R 777 /Temp/SchemaCompare
}

EnsureTargetServerIsProvided $1
LoadPassword

function LoopOverDepedencies()
{
    EnsureDependenciesExist
    
    while read Dependency; do  
    
        Compare $Dependency
    
    done <<< "$({ cat "$PWD/Dependencies"; echo; })"
}

function CompareOnce()
{
    Compare $1
}

export Dependency=$2

if [ ${Dependency:-NotSet} == "NotSet" ]; then 
    LoopOverDepedencies
else
    CompareOnce $2
fi